[{"content":"在经历了一年的闲置之后，我决定继续维护我的博客了！其实我有很多想写的内容，但是迫于学业繁忙，和个人内心的焦虑与浮躁，没能完整地写出多少内容。 所以，为了恢复写作的能力，让自己的内心更加平静，还有，交到更多来自fedi的朋友，我决定从我喜欢的内容开始，那就是——变形金刚IDW2005！\n请欣赏我最爱的变形金刚插曲，来自86大电影，热破的出场。\n当我提到「变形金刚」的时候，默认都是指变形金刚IDW2005，这是我最能认同的宇宙，它固然有很多缺点，但它给了我们一段无法忘记的旅程。 后文的聊天记录都出自我和妹梅。\nMTMTE 0 —— 擎天柱之死\r我应该是在高三的时候开始看变形金刚漫画的——很搞笑的时间点！其实我很早就看过TFP，因此早就接触了铁块同人圈，发现IDW系列好像是同人圈中占比最多的宇宙。我印象很深刻，在高三上学期一次全年级的视频讲座时（讲一些写卷子小技巧，很神秘），大部分人都在摸鱼，而我也不例外。我拿着手机打开了MTMTE，一直读到了霸王出逃。 我之前从来没有过，看漫画书看哭的经历。这个剧情结点后，我也看哭了很多次，从这里开始，我也真的彻底上瘾了，迷上了这场充满爱与痛苦的寻光之旅。 和我一起入脑的还有妹梅，ta是我现实生活中唯一一个（其实还有一个朋友但是他没有这么魔怔orz）和我一样对这个系列无比上瘾的朋友，变形金刚已经成为了我们俩生活的一部分。我们两个就这么一起堕入了孩之宝和某英国编剧的陷阱。 所以，这一篇Blog就是记录下我近几年收集IDW实体漫画的过程！（流水账\n第一幕 —— 塞伯坦思乡蓝调\r我的第一部实体漫画，应该是漂移个人本。这是在我去某届SLO的现场时买的。我记得这里包含了漂移本篇的剧情，和英雄纪。 在这之后我也认识了钢铁月球漫画书店，到今天我可能去过近十次钢铁月球，遍布全国各地。 经常看美漫的朋友都知道，美漫的文本量很大，剧情和信息密度往往都很高，在手机和电脑上看电子版的时候即使放大了一格格看也会错过很多细节。更别提一些多次转载上传的图片损坏。 但翻开这本，这个印刷！这个清晰度！这个质感！一本漫画书的钱，我好像买到了一本塞伯坦时尚杂志，一本A神等漫画大师的作品集！这是和电子版完全不一样的体验啊！读实体版的变形金刚也太爽了吧！\n第二幕 —— 黑暗塞伯坦\r这之后，我就一发不可收拾，变形金刚漫画成为了我和妹梅用零花钱奖励自己的指定礼品。 变形金刚中文实体漫画主要就是两个购买渠道，分别来自两个汉化组。我们两个都喜欢其中一家，因为装订和封面都更加经典，而且是平装版。二阶段后期的篇章和一阶段的大事件我们基本都已经收集完整。 但是最有难度的一点是，一些早期出版的，以及IDW二阶段的前十本，即RID和MTMTE的前五本，清华出版社的平装版，当时都已经停止印刷，绝版了。我们两个社恐还为此鼓起勇气，去私信了这些经销商，问他们会不会找到一些存货，答案都是：“看运气”。 爱好相同的朋友们估计也知道，难度最大的RID和MTMTE，尤其是MTMTE，因为过于火爆，有很多像我们一样入坑晚的朋友都在收，所以全球很多商家或者收藏者都把漫画书当成了理财产品，价格很恐怖。即使是无印版这种稍微不那么热门的，也有人敢开出超原价3倍价格。 但是也有很幸运的情况，比如妹梅在某个钢铁月球里发现了RID前五本的存货，于是就帮我以接近原价的绝好价拿下了！ 就这么慢慢地收集，还是没有MTMTE前五本的影子，要么是无良商家标价单本好几百，要么是一些挂假图的盗版印刷欺骗感情。\n事情的转机是看到钢铁月球发出的这条消息： 这个消息让我和妹梅都陷入了短暂的焦虑，尤其是我们发现网店的很多漫画也逐渐下架，或者价格翻倍。所以说在这之后我们恐怕无法再从官方渠道买到一手的漫画了。只能希望有同好可以以一个不错的价格出二手。\n第三幕 —— 将暮之光\r某一天，妹梅突然告诉我，在某二手平台上出现了让人震惊的绝好价格，最重要的，包含MTMTE前四本。几乎是毫不犹豫，我用很低的花费，结束了这场旅程。虽然有些重复的，但是后续我也用绝好价格出给了其他在搜寻漫画的同好！ 就这样，我的收藏之旅算是结束了。还有一些一阶段的经典实体书，以及IDW大后期的还未被实体化的漫画，可能会被我逐渐加入收藏。非常感谢汉化组的努力！ 其实距离我结束寻光之旅已经过了快两年，但是现在，我仍然会在浮躁的时候，迷茫的时候，需要一些情感支持的时候，翻开MTMTE，看一看寻光号上的故事，回味一个个经典大事件。而变形金刚也早已融入了我的生活，我和妹梅也喜欢吟诵一些经典台词，用漫画剧情映射现实（好死宅！！）。 熟悉我的人可能知道，我大概已经看了不下5遍MTMTE，后续也会一直看下去。总之，这篇流水账就这么结束了，不太有参考意义，因为收二手漫画本来就是很看运气，但回顾一下，好像我也完成了一场寻光之旅。\n最后，如果你喜欢高文本量的作品，喜欢细腻的情感表达，喜欢太空歌剧，那我向你强烈安利变形金刚难以置信！！！这也许会是一部适合你的作品，也许会打破你对变形金刚的刻板认知，也许会让你爱上IDW2005这个系列。\n永远？我听着挺靠谱的 ","date":"2025-05-01T00:00:00Z","image":"http://localhost:1313/p/%E5%AF%BB%E5%85%89%E4%B9%8B%E6%97%85%E6%88%91%E7%9A%84%E5%8F%98%E5%BD%A2%E9%87%91%E5%88%9A%E6%BC%AB%E7%94%BB%E6%94%B6%E9%9B%86%E4%B9%8B%E8%B7%AF/10_hu_a7e84fbb6516ce41.png","permalink":"http://localhost:1313/p/%E5%AF%BB%E5%85%89%E4%B9%8B%E6%97%85%E6%88%91%E7%9A%84%E5%8F%98%E5%BD%A2%E9%87%91%E5%88%9A%E6%BC%AB%E7%94%BB%E6%94%B6%E9%9B%86%E4%B9%8B%E8%B7%AF/","title":"寻光之旅——我的变形金刚漫画收集之路"},{"content":"A1阶段 2024-01-20 至 2024-07-31\rA1.1 2024-01-20 至 2024-04-17\rA1.2 2024-04-18 至 2024-07-31\r学习的内容主要包括：\n全部音素以及发音 语法： 现在时 复合过去时 未完成过去时 简单将来时 最近将来时 句式： 直陈式 疑问句 否定句 命令式 简单复合句 ","date":"2024-07-26T00:00:00Z","permalink":"http://localhost:1313/p/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84%E6%B3%95%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","title":"从0开始的法语学习记录"},{"content":"在通读了官方文档后，有一些值得着重注意的点：主要产品都使用什么方法扫描？\n优势\rIt is open source (free). Supports many languages (go, python, java, javascript, php, and more). There are about 1000 predefined rules you can use “out of the box”. Does NOT require buildable source code. There is no Domain Specific Language (DSL) to learn, you can make custom patterns to match the code you are targeting. Easy to use for any developer, does not require expertise. Products 产品分类\rSemgrep包含多重代码审计方法，包括SAST，SCA和Secrets。这些方式可以根据用户需要进行组合。此文档着重关注SAST方式。\n静态应用程序安全测试 SAST (Static Application Security Testing): 通过直接查看应用程序的源代码发现各种安全漏洞，以避免损失。SAST工具和扫描程序基本都是在应用程序代码完全编译之前使用，因此也可以将它们称为“白盒”工具。 软件成分分析 SCA (Software Composition Analysis):\nSemgrep Code\r一种静态应用安全测试（SAST）解决方案，除了Semgrep OSS之外，还使用了专有的Semgrep分析，如跨文件（文件间）和跨功能（文件内）数据流（cross-function or interprocedural analysis）。这使得真阳性率高于Semgrep OSS。 使用方式为在线网站+命令行。\n真阳性率true positives rate: 检测出来的真阳性样本数除以所有真实阳性样本数。\nJava 中的强类型与其编译时和运行时检查相结合，降低了利用整数或布尔输入执行注入式攻击的可能性。Semgrep Pro可以通过利用这些检查来减少误报。 Semgrep OSS引擎根据模式进行匹配，这可能会导致误报（FPs），但只有专有的Semgrep能够检测布尔值和整数值，并将其标记为未受污染或安全，从而消除误报。\nSemgrep 代码使用Rules（规则,封装模式匹配逻辑和数据流分析）来扫描代码，以查找安全问题、样式违规、漏洞等。只要发现代码与规则定义的模式相匹配，Semgrep就会生成并向用户报告发现的问题。\n官方规则注册表及社区\n除了注册表中可用的规则之外，用户还可以编写自定义规则，以确定Semgrep代码在软件仓库中检测到的内容。无论是使用已有规则，还是编写自定义规则，了解Semgrep代码运行的规则都有助于了解它是如何检测安全问题的。 Semgrep Code是透明的，用户可以配置其运行的规则，并检查其语法，从而了解发现问题的方式。用户还可以自定义规则的内容，以提高规则的真阳性率，或让 Semgrep 向开发人员发送相关信息。\nSemgrep OSS\rSemgrep OSS是一款快速、轻量级的程序分析工具，可帮助检测代码中的安全问题。使用的是 Semgrep 的 LGPL 2.1 开源引擎。\n注意：在集成方面，Semgrep OSS和Semgrep Code都可用于扫描本地代码，也可集成到 CI/CD 管道中，自动对软件源进行持续扫描。\nSemgrep Secrets\rSemgrep Secrets 扫描代码，检测暴露的 API 密钥、密码和其他凭证。一旦暴露，恶意行为者就会利用这些凭据泄露数据或访问敏感系统。Semgrep Secrets 可帮助用户确定:\n哪些Secrets已经提交到用户的存储库中。 Secrets的验证状态；例如，有效的Secrets是指那些经过网络服务测试并确认能够成功授予资源或身份验证的Secrets。它们正在使用中。 对于 GitHub 存储库：公共或私有存储库中是否存在凭证。 Semgrep通过优先处理有效的泄露Secrets，并在开发人员的PR和MR中直接发布评论，告知开发人员有效的Secrets，从而节省安全工程师的时间和精力。 Semgrep Supply Chain\rSemgrep Supply Chain 是一款软件构成分析（SCA）工具，可检测代码库中由开源依赖关系引入的安全漏洞。它还可以:\n生成软件物料清单（SBOM），提供完整的开源组件清单 查询有关依赖项的信息 支持执行公司的开源软件包许可要求 Semgrep Supply Chain（Semgrep供应链管理软件）能够分析锁定文件（lockfile）中的依赖关系，然后根据锁定文件扫描用户的代码库，查找可达到的结果。某些语言（如 Java）有多个受支持的锁文件，这取决于用户的软件包管理器。要使用Semgrep Supply Chain扫描锁文件，该文件必须具有其中一个支持的锁文件名。 Language support 支持语言\rSemgrep Code\rMaturity level 成熟等级 GA(Parse Rate 99%+): C, C++, C#, Go, Java, JavaScript, Kotlin, Python, TypeScript, Ruby, Rust, JSX, PHP, Scala, Swift, Generic, JSON, Terraform\nMaturity level 成熟等级 BETA(Parse Rate 95%+): Apex, Elixir\nMaturity level 成熟等级 Experimental(Parse Rate 90%+): Bash, Cairo, Clojure, Dart, Dockerfile, Hack, HTML, Jsonnet, Julia, Lisp, Lua, Ocaml, R, Scheme, Solidity, YAML, XML\nSemgrep OSS\rBash, C, C++, C#, Cairo, Clojure, Dart, Dockerfile, Generic, Go, Hack, HTML, Java, JavaScript, JSON, Jsonnet, Julia, Lisp, Lua, Kotlin, Ruby, Rust, JSX, OCaml, PHP, Python, R, Scala, Scheme, Solidity, Swift, TypeScript, YAML, XML\nSemgrep Supply Chain\r对于某些语言，如JavaScript和Python，还需要对清单文件（manifest file）进行解析，以确定反式性（transitivity）。\nMaturity level 成熟等级 GA(Parse Rate 99%+): C#(NuGet), Go(Go modules), Java(Gradle, Maven), JavaScript or TypeScript(npm, Yarn, Yarn 2, Yarn 3, pnpm), Python(pip, pip-tools, Pipenv, Poetry), Ruby(RubyGems) Maturity level 成熟等级 Lockfile-only: Rust(Cargo§), Dart(Pub), Elixir(Hex), Kotlin(Gradle, Maven), PHP(Composer), Scala(Maven), Swift(SwiftPM)\n如何使用Semgrep进行扫描（WSL）\r由于我只有Windows设备，而本地的Semgrep及Ocaml都还不支持Windows，于是使用内置WSL服务。安装教程可查阅微软官方文档。 安装指令: python3 -m pip install semgrep 登录Semgrep账号: semgrep login 同时可以安装VSCode中的Semgrep官方插件，就可以在VSCode命令行中使用Semgrep扫描指令。\n核心方法：Run Rules\r使用Rules规则进行静态代码分析，检查各种代码问题，包括安全漏洞、常见编程错误、最佳实践、代码风格等。同时，用户也可以根据自己的需求创建和定制规则。 官方规则编写教程（超详细）\nPattern syntax 模式语法\r可以在一条字符串中寻找给定的模式子串相同的所有子串。如Patternreturn 42可以匹配函数中的顶层语句或任何嵌套语句：\n1 2 3 4 5 def foo(x): if x \u0026gt; 1: if x \u0026gt; 2: return 42 return 42 在命令行中，使用--pattern（或-e）标记指定patterns。在一个配置文件中可以指定多个coordinating patterns。\n备注\rCI(Continuous Integration) 持续集成: 是在源代码变更后自动检测、拉取、构建和（在大多数情况下）进行单元测试的过程。持续集成是启动管道的环节（尽管某些预验证 —— 通常称为 上线前检查(pre-flight checks) —— 有时会被归在持续集成之前）。 持续集成的目标是快速确保开发人员新提交的变更是好的，并且适合在代码库中进一步使用。 CD(continuous deployment)持续部署: 持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。 持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。\nLGPL(Lesser General Public License)开源协议: LGPL 允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。 但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。 GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品\ntbc\n","date":"2024-07-26T00:00:00Z","permalink":"http://localhost:1313/p/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","title":"代码审计工具学习记录"},{"content":"最早了解到博客的概念是在初中的信息课上，老师说如果大家未来要搞技术的话，还是有一个自己的博客比较好，能养成写博客的习惯就更好！我一直都没太理解博客的意思，以为是在CSDN，豆瓣等以长文章为主要传播媒介的平台上写点东西就算是了。其实略有偏颇。在一两年前，我才了解到建立私人博客页这样一种方式。\n我一直对博客写作有一种怯意，可能是觉得需要有很大的知识储备和技术才能才可以写出有价值的内容，而我目前只是个刚刚踏入软件专业的本科生，我真的可以做到吗？但是在联邦宇宙参观了很多友友的博客后，看到大家非常有意思的日记，非常触动人的情绪记录，还有学习过程、经验分享、影音鉴赏等等，我突然觉得，也许我也可以试试！就这样，看着教程，挑选了个喜欢的主题，这个简陋的小站就完成了！\n我还没有完全想好具体要写什么内容，要给什么人看。我一直认为文字的价值不止是传播，但是经适当的传播后一定会创造更大的价值，但我的文字又往往更爱释放在私人情感分享上，所以我大概会尽量做到“有一定的可读性”同时“充分表达我的想法”吧！就我目前想到的，我可能会写一些学习记录（语言学习、技术学习）、杂谈、读书笔记和影视欣赏，目前只能想到这些啦！\n我认为，保持写作的能力非常重要，而博客这一形式与我的想法不谋而合，那么希望我这个能力可以通过写博客的方式永远保持下去！\n","date":"2024-04-16T00:00:00Z","permalink":"http://localhost:1313/p/%E4%B8%80%E7%AF%87%E7%AE%80%E7%9F%AD%E7%9A%84%E6%9D%82%E8%B0%88%E5%90%AF%E5%8A%A8%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/","title":"一篇简短的杂谈，启动我的博客"}]