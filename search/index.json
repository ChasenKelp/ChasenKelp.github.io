[{"content":"之前博客用的静态网页生成器是Jekyll，因为我是用 Github Page 托管的，默认支持的框架就是 Jekyll 。但是因为对之前的主题不是很满意，于是瞄向了 Hugo-stack ，使用的人很多，有很多可以抄的作业和很美的装修，此外，因为 Hugo是 Go 开发的，编译型语言生成速度很快！（但个人体验其实差别没有非常大，可能适合ADHD（？😹））\n其实还有一个很重要优点，就是可以把主题拉取存放在一个目录下，方便切换，但是因为我装修改动挺大，按常规操作出现了一些问题，懒得解决，于是干脆把主题拉下来，直接在样例的基础是修改！方便多啦！\n五一的时候花了一天时间把我的博客改造成了 Hugo，现在也算是稳定运行啦，希望我可以坚持写作！\n下面就是一些我遇到的小坑，其实都没有很难解决，但还是分享下吧！\n使用 GitPage 托管，推送代码后网页仍显示404？\r出现这个问题可能是和我一样心急，没有好好看文档😂\n但是没关系，因为其实在 Hugo 的目录结构中，public目录下才是生成的发布文件，所以只需要把public目录下生成的内容 push 到 Github Page 仓库下就可以噜！\n当然也可以看官方文档这里，提到了设置了 Github Action 的方案👉Host on GitHub Pages | Hugo\n已经修改了baseurl，为什么我的xml文件里还都是localhost？\r这个更好解决，如果在config.yaml中已经修改了baseurl，但是生成的index.xml或sitemap中还是会出现类似这样的情况：\n1 2 3 4 \u0026lt;url\u0026gt; \u0026lt;loc\u0026gt;http://localhost:1313/\u0026lt;/loc\u0026gt; \u0026lt;lastmod\u0026gt;2025-05-01T00:00:00+00:00\u0026lt;/lastmod\u0026gt; \u0026lt;/url\u0026gt; 只需要运行hugo命令重新生成一遍就可以了，注意不是hugo server！\n引入的Neodb卡片无法显示？\r关于引入Neodb卡片的短代码，我参考了这位友的博客，非常有用细致！👉Hugo Stack 主题装修笔记 Part 3\n出现无法显示的问题可能是因为肉身在墙内。如果使用的是Clash，可以开启TUN模式，保证你的localhost也可以被代理，方便本地生成查看效果。\nTBC.\n","date":"2025-05-10T00:00:00Z","image":"https://chasenkelp.github.io/p/%E8%A3%85%E4%BF%AEhugo%E5%8D%9A%E5%AE%A2%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E5%9D%91/%E5%85%AC%E4%B8%BB%E7%AC%91%E5%98%BB_hu_521deed079e5073f.png","permalink":"https://chasenkelp.github.io/p/%E8%A3%85%E4%BF%AEhugo%E5%8D%9A%E5%AE%A2%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E5%9D%91/","title":"装修Hugo博客时遇到的一点小坑"},{"content":"在经历了一年的闲置之后，我决定继续维护我的博客了！其实我有很多想写的内容，但是迫于学业繁忙，和个人内心的焦虑与浮躁，没能完整地写出多少内容。 所以，为了恢复写作的能力，让自己的内心更加平静，还有，交到更多来自fedi的朋友，我决定从我喜欢的内容开始，那就是——变形金刚IDW2005！\n请欣赏我最爱的变形金刚插曲，来自86大电影，热破的出场。\n当我提到「变形金刚」的时候，默认都是指变形金刚IDW2005，这是我最能认同的宇宙，它固然有很多缺点，但它给了我们一段无法忘记的旅程。 后文的聊天记录都出自我和妹梅。\nMTMTE 0 —— 擎天柱之死\r我应该是在高三的时候开始看变形金刚漫画的——很搞笑的时间点！其实我很早就看过TFP，因此早就接触了铁块同人圈，发现IDW系列好像是同人圈中占比最多的宇宙。我印象很深刻，在高三上学期一次全年级的视频讲座时（讲一些写卷子小技巧，很神秘），大部分人都在摸鱼，而我也不例外。我拿着手机打开了MTMTE，一直读到了霸王出逃。 我之前从来没有过，看漫画书看哭的经历。这个剧情结点后，我也看哭了很多次，从这里开始，我也真的彻底上瘾了，迷上了这场充满爱与痛苦的寻光之旅。 和我一起入脑的还有妹梅，ta是我现实生活中唯一一个（其实还有一个朋友但是他没有这么魔怔orz）和我一样对这个系列无比上瘾的朋友，变形金刚已经成为了我们俩生活的一部分。我们两个就这么一起堕入了孩之宝和某英国编剧的陷阱。 所以，这一篇Blog就是记录下我近几年收集IDW实体漫画的过程！（流水账\n第一幕 —— 塞伯坦思乡蓝调\r我的第一部实体漫画，应该是漂移个人本。这是在我去某届SLO的现场时买的。我记得这里包含了漂移本篇的剧情，和英雄纪。 在这之后我也认识了钢铁月球漫画书店，到今天我可能去过近十次钢铁月球，遍布全国各地。 经常看美漫的朋友都知道，美漫的文本量很大，剧情和信息密度往往都很高，在手机和电脑上看电子版的时候即使放大了一格格看也会错过很多细节。更别提一些多次转载上传的图片损坏。 但翻开这本，这个印刷！这个清晰度！这个质感！一本漫画书的钱，我好像买到了一本塞伯坦时尚杂志，一本A神等漫画大师的作品集！这是和电子版完全不一样的体验啊！读实体版的变形金刚也太爽了吧！\n第二幕 —— 黑暗塞伯坦\r这之后，我就一发不可收拾，变形金刚漫画成为了我和妹梅用零花钱奖励自己的指定礼品。 变形金刚中文实体漫画主要就是两个购买渠道，分别来自两个汉化组。我们两个都喜欢其中一家，因为装订和封面都更加经典，而且是平装版。二阶段后期的篇章和一阶段的大事件我们基本都已经收集完整。 但是最有难度的一点是，一些早期出版的，以及IDW二阶段的前十本，即RID和MTMTE的前五本，清华出版社的平装版，当时都已经停止印刷，绝版了。我们两个社恐还为此鼓起勇气，去私信了这些经销商，问他们会不会找到一些存货，答案都是：“看运气”。 爱好相同的朋友们估计也知道，难度最大的RID和MTMTE，尤其是MTMTE，因为过于火爆，有很多像我们一样入坑晚的朋友都在收，所以全球很多商家或者收藏者都把漫画书当成了理财产品，价格很恐怖。即使是无印版这种稍微不那么热门的，也有人敢开出超原价3倍价格。 但是也有很幸运的情况，比如妹梅在某个钢铁月球里发现了RID前五本的存货，于是就帮我以接近原价的绝好价拿下了！ 就这么慢慢地收集，还是没有MTMTE前五本的影子，要么是无良商家标价单本好几百，要么是一些挂假图的盗版印刷欺骗感情。\n事情的转机是看到钢铁月球发出的这条消息： 这个消息让我和妹梅都陷入了短暂的焦虑，尤其是我们发现网店的很多漫画也逐渐下架，或者价格翻倍。所以说在这之后我们恐怕无法再从官方渠道买到一手的漫画了。只能希望有同好可以以一个不错的价格出二手。\n第三幕 —— 将暮之光\r某一天，妹梅突然告诉我，在某二手平台上出现了让人震惊的绝好价格，最重要的，包含MTMTE前四本。几乎是毫不犹豫，我用很低的花费，结束了这场旅程。虽然有些重复的，但是后续我也用绝好价格出给了其他在搜寻漫画的同好！ 就这样，我的收藏之旅算是结束了。还有一些一阶段的经典实体书，以及IDW大后期的还未被实体化的漫画，可能会被我逐渐加入收藏。非常感谢汉化组的努力！ 其实距离我结束寻光之旅已经过了快两年，但是现在，我仍然会在浮躁的时候，迷茫的时候，需要一些情感支持的时候，翻开MTMTE，看一看寻光号上的故事，回味一个个经典大事件。而变形金刚也早已融入了我的生活，我和妹梅也喜欢吟诵一些经典台词，用漫画剧情映射现实（好死宅！！）。 熟悉我的人可能知道，我大概已经看了不下5遍MTMTE，后续也会一直看下去。总之，这篇流水账就这么结束了，不太有参考意义，因为收二手漫画本来就是很看运气，但回顾一下，好像我也完成了一场寻光之旅。\n最后，如果你喜欢高文本量的作品，喜欢细腻的情感表达，喜欢太空歌剧，那我向你强烈安利变形金刚难以置信！！！这也许会是一部适合你的作品，也许会打破你对变形金刚的刻板认知，也许会让你爱上IDW2005这个系列。\n永远？我听着挺靠谱的 ","date":"2025-05-01T00:00:00Z","image":"https://chasenkelp.github.io/p/%E5%AF%BB%E5%85%89%E4%B9%8B%E6%97%85%E6%88%91%E7%9A%84%E5%8F%98%E5%BD%A2%E9%87%91%E5%88%9A%E6%BC%AB%E7%94%BB%E6%94%B6%E9%9B%86%E4%B9%8B%E8%B7%AF/10_hu_a7e84fbb6516ce41.png","permalink":"https://chasenkelp.github.io/p/%E5%AF%BB%E5%85%89%E4%B9%8B%E6%97%85%E6%88%91%E7%9A%84%E5%8F%98%E5%BD%A2%E9%87%91%E5%88%9A%E6%BC%AB%E7%94%BB%E6%94%B6%E9%9B%86%E4%B9%8B%E8%B7%AF/","title":"寻光之旅——我的变形金刚漫画收集之路"},{"content":"优势\r它是开源的。 易于使用: Semgrep 的语法简单直观，使用 YAML 或者纯文本格式的规则定义，使得规则编写和理解变得容易。用户可以根据特定的需求编写自定义规则，或者使用社区维护的规则库。 快速扫描: Semgrep 使用高效的静态分析算法，能够在大型代码库中进行快速扫描。它具有可扩展性，适用于小型项目和大型企业应用程序。 广泛的规则库: Semgrep 提供了一个丰富的规则库，涵盖了安全漏洞、常见的代码错误、最佳实践和性能问题等多个方面。用户可以直接使用这些规则，也可以根据自己的需求进行定制和扩展。 多语言支持: Semgrep 支持多种流行的编程语言，如 Python、JavaScript、Go、Java 等。这使得它成为跨多个技术栈的团队或项目的理想选择。 集成和扩展性: Semgrep 可以与各种 CI/CD 工具和代码编辑器集成，例如 GitLab、GitHub Actions、Jenkins 等。此外，Semgrep 还提供了 API 和 CLI 接口，使用户能够轻松集成到现有的工作流程中。 可定制性: Semgrep 允许用户根据自己的需求创建自定义规则。用户可以使用 Semgrep 提供的丰富的模式匹配语法来编写适合特定代码风格和规范的规则。 活跃的社区: Semgrep 拥有活跃的开源社区支持，社区维护了大量的规则库，并定期更新和改进 Semgrep 的功能和性能。•易于使用: Semgrep 的语法简单直观，使用 YAML 或者纯文本格式的规则定义，使得规则编写和理解变得容易。用户可以根据特定的需求编写自定义规则，或者使用社区维护的规则库。 Products 产品分类\r在运行Semgrep ci扫描的时候默认是同时使用了所有产品下的规则，但是用户可以通过指令更改来运行特定产品(如semgrep ci --code)。\nSemgrep OSS\rSemgrep OSS是一款快速、轻量级的程序分析工具，可帮助检测代码中的安全问题。使用的是 Semgrep 的 LGPL 2.1 开源引擎。\n注意：在集成方面，Semgrep OSS和Semgrep Code都可用于扫描本地代码，也可集成到 CI CD 管道中，自动对软件源进行持续扫描。由于Semgrep OSS 只能分析单个功能内的交互，称为程序内或单功能分析。但是，这意味着 Semgrep OSS 比 Semgrep Code 略快。\nSemgrep Code\r一种静态应用安全测试（SAST）解决方案，除了Semgrep OSS之外，还使用了专有的Semgrep分析，如跨文件（文件间）和跨功能（文件内）数据流（cross-function or interprocedural analysis）。这使得真阳性率高于Semgrep OSS。 使用方式为在线网站+命令行。\nSemgrep Code使用Rules（规则,封装模式匹配逻辑和数据流分析）来扫描代码，以查找安全问题、样式违规、漏洞等。只要发现代码与规则定义的模式相匹配，Semgrep就会生成并向用户报告发现的问题。\n官方规则注册表及社区\n除了注册表中可用的规则之外，用户还可以编写自定义规则，以确定Semgrep代码在软件仓库中检测到的内容。无论是使用已有规则，还是编写自定义规则，了解Semgrep代码运行的规则都有助于了解它是如何检测安全问题的。 Semgrep Code是透明的，用户可以配置其运行的规则，并检查其语法，从而了解发现问题的方式。用户还可以自定义规则的内容，以提高规则的真阳性率，或让 Semgrep 向开发人员发送相关信息。\n注：Semgrep OSS指的是Semgrep的开源许可产品，可以使用OSS Engine和在Semgrep Registry中带开源许可的规则，或者编写用户自己的自定义规则。总体而言，Semgrep OSS和Semgrep Pro的主要区别在于，Semgrep Pro包括更高级的分析和专有的Pro规则，而Semgrep OSS则主要使用开源许可的规则。\nSemgrep Secrets\rSemgrep Secrets 扫描代码，检测暴露的 API 密钥、密码和其他凭证。一旦暴露，恶意行为者就会利用这些凭据泄露数据或访问敏感系统。Semgrep Secrets 可帮助用户确定:\n哪些Secrets已经提交到用户的存储库中。 Secrets的验证状态；例如，有效的Secrets是指那些经过网络服务测试并确认能够成功授予资源或身份验证的Secrets。它们正在使用中。 对于 GitHub 存储库：公共或私有存储库中是否存在凭证。 Semgrep通过优先处理有效的泄露Secrets，并在开发人员的PR和MR中直接发布评论，告知开发人员有效的Secrets，从而节省安全工程师的时间和精力。 注：所有验证 （如 API 调用） 都在用户的环境中本地完成。不会向 Semgrep 服务器发送任何令牌。 采用的方法包括： 使用正则表达式搜索 语义分析 验证 熵分析 Semgrep Supply Chain\rSemgrep Supply Chain 是一款软件构成分析（SCA）工具，可检测代码库中由开源依赖关系引入的安全漏洞。它还可以:\n生成软件物料清单（SBOM），提供完整的开源组件清单 查询有关依赖项的信息 支持执行公司的开源软件包许可要求 Semgrep Supply Chain（Semgrep供应链管理软件）能够分析锁定文件（lockfile）中的依赖关系，然后根据锁定文件扫描用户的代码库，查找可达到的结果。某些语言（如 Java）有多个受支持的锁文件，这取决于用户的软件包管理器。要使用Semgrep Supply Chain扫描锁文件，该文件必须具有其中一个支持的锁文件名。 Language support 支持语言\r成熟等级解释： Semgrep OSS\rBash, C, C++, C#, Cairo, Clojure, Dart, Dockerfile, Generic, Go, Hack, HTML, Java, JavaScript, JSON, Jsonnet, Julia, Lisp, Lua, Kotlin, Ruby, Rust, JSX, OCaml, PHP, Python, R, Scala, Scheme, Solidity, Swift, TypeScript, YAML, XML\nSemgrep Code\rMaturity level 成熟等级 GA(Parse Rate 99%+): C, C++, C#, Go, Java, JavaScript, Kotlin, Python, TypeScript, Ruby, Rust, JSX, PHP, Scala, Swift, Generic, JSON, Terraform\nMaturity level 成熟等级 BETA(Parse Rate 95%+): Apex, Elixir\nMaturity level 成熟等级 Experimental(Parse Rate 90%+): Bash, Cairo, Clojure, Dart, Dockerfile, Hack, HTML, Jsonnet, Julia, Lisp, Lua, Ocaml, R, Scheme, Solidity, YAML, XML\nSemgrep Supply Chain\r对于某些语言，如JavaScript和Python，还需要对清单文件（manifest file）进行解析，以确定反式性（transitivity）。\nMaturity level 成熟等级 GA(Parse Rate 99%+): C#(NuGet), Go(Go modules), Java(Gradle, Maven), JavaScript or TypeScript(npm, Yarn, Yarn 2, Yarn 3, pnpm), Python(pip, pip-tools, Pipenv, Poetry), Ruby(RubyGems) Maturity level 成熟等级 Lockfile-only: Rust(Cargo§), Dart(Pub), Elixir(Hex), Kotlin(Gradle, Maven), PHP(Composer), Scala(Maven), Swift(SwiftPM)\n核心方法：Run Rules\r概述\r规则(Rules)是 Semgrep 必须与代码匹配才能生成结果的模式的规范。规则是用 YAML 编写的。如果没有规则，引擎将没有有关如何匹配 code 的说明。 规则可以在 Semgrep 或其 OSS Engine 上运行。 按作者划分Semgrep 注册表(Semgrep Registry)中的规则类型：\n社区规则 - 由 Semgrep 团队审查，这些规则包含来自 Semgrep 社区的贡献。社区规则包含一系列规则，包括许多为安全审计员制定的规则。 第三方规则 - 由 Trail of Bits、GitLab 等外部贡献者直接创建。 私有规则 - 由用户自己的组织编写和发布的规则，仅供用户的组织使用。 专业规则 - 由 Semgrep 团队创建的专有规则，针对需要准确调查结果的安全和软件工程师。这些规则为许多编程语言提供了更大的覆盖范围，并使用了最新的 Semgrep 功能。 按功能分类则有两种类型的规则：搜索和污点。\n搜索规则\r规则默认为此类型。搜索规则根据规则描述的模式检测匹配项。搜索规则执行多种语义分析，例如：\n将语法不同的代码解释为语义等效 常量传播 将完全限定名称与其在代码中的引用匹配，即使不是完全限定名称 类型推断，尤其是在使用类型化元变量时 污点规则\r污点规则除了使用默认搜索功能外，还使用 Semgrep 的污点分析。污点规则能够指定数据的源、接收器和传播器，以及该数据的排错程序。污点分析跟踪和追溯不受信任或不安全的数据流。如果这些输入未经过清理，则来自用户输入等来源的数据可能不安全，并被用作攻击媒介。污点分析提供了一种在数据通过程序从不受信任的来源移动到易受攻击的函数时对其进行跟踪的方法。\n运行规则\r使用Rules规则进行静态代码分析，检查各种代码问题，包括安全漏洞、常见编程错误、最佳实践、代码风格等。同时，用户也可以根据自己的需求创建和定制规则。 公有规则存储在Semgrep 注册表(Semgrep Registry)这使用户能够扫描代码，而无需编写任何自定义内容。Semgrep Registry 存储在开源存储库中。 规则可以组织在规则集中。规则集是通过编程语言、OWASP 类别或框架相关的规则。这些规则集由 Semgrep 的团队策划，并随着新规则添加到 Semgrep Registry 而更新。 运行规则的类型：\n现有 Semgrep Registry 规则。所有用户都可以为开源 Semgrep Registry 做出贡献。 本地规则： 传递到命令行中的一次性临时规则。 YAML 定义的规则。 本地规则和 Semgrep Registry 规则的组合，或者通常多个规则的组合。 官方规则编写教程\n核心原理：模式匹配逻辑\rSemgrep在运行规则时，采用模式匹配规则。每当 Semgrep 找到与规则定义的模式匹配的代码时，它都会生成并向用户报告结果。模式匹配在代码中搜索给定模式。例如，表达式模式可以匹配完整表达式或子表达式的一部分：1 + func(42)\n1 foo(1 + func(42)) + bar() 同样，语句模式可以匹配 top 语句或任何嵌套语句：return 42\n1 def foo(x): if x \u0026gt; 1: if x \u0026gt; 2: return 42 return 42 与正则表达式不同，这种匹配语法理解代码的结构并构建语法树来搜索匹配项，且提供了微调匹配的特定机制。 其模式语法具体可见：Pattern syntax | Semgrep\n核心原理：数据流分析\rSemgrep 提供了一个程序内数据流分析引擎，该引擎打开了各种 Semgrep 功能。Semgrep 提供以下数据流分析：\nConstant propagation常量传播允许 Semgrep 匹配到时可以恒定减少折叠（match against when can be reduced to by constant folding）。Constant propagation 还有一个特定的实验功能，称为 Symbolic propagation。 Taint tracking (known also as taint analysis) 污点跟踪（也称为污点分析）使用户能够编写简单的规则来捕获复杂的注入错误，例如可能导致跨站点脚本(XSS)的错误。 原则上，数据流分析引擎（提供污点跟踪、常量传播和符号传播）可以在Semgrep支持的任何语言上运行。但是，支持级别低于常规 Semgrep 匹配引擎的级别。\n当 Semgrep 对代码执行分析时，它会创建一个抽象语法树 （AST），然后将其转换为易于分析的中间语言 （IL）。随后，Semgrep 主要对 IL 运行与语言无关的分析。但是，此翻译并未完全完成。\n注意：在使用数据流分析时，Semgrep 可能无法正确分析某些语言的某些功能。因此，即使 Semgrep 找到不受支持的构造，它也不会失败。当忽略构造时，分析会继续。这可能会导致 Semgrep 不匹配某些应该匹配的代码（漏报）或不匹配不应匹配的代码（误报）。\n个人安装使用教程\r注册账号并登录在线平台\r在 Semgrep AppSec 平台，单击 Sign in with GitHub（使用 GitHub 登录）或 Sign in with GitLab 进行注册。按照屏幕上的提示并继续。\n启动CLI并安装Semgrep\rMacOS\r1 2 3 4 5 # install through homebrew brew install semgrep # install through pip python3 -m pip install semgrep # confirm installation succeeded by printing the currently installed versionsemgrep --version Linux\r1 2 3 4 # install through pip python3 -m pip install semgrep # confirm installation succeeded by printing the currently installed version semgrep --version WSL\r1 2 3 4 # install through pip python3 -m pip install semgrep # confirm installation succeeded by printing the currently installed version semgrep --version 登录Semgrep帐户\r在CLI输入指令：\n1 semgrep login 点击输出的链接跳转授权登录。\n使用CLI扫描\r导航到项目库的根目录，运行扫描指令。\n1 semgrep ci 命令行出现下图显示结果（WSL+VScode环境）表示正在扫描中。 可以通过指令更改来运行特定产品：\n1 2 3 4 5 6 7 8 9 10 11 # scan with OSS only （本地单文件SAST方案） semgrep ci --oss-only # scan with Semgrep Code （可跨文件的SAST方案） semgrep ci --code # scan with Semgrep Supply Chain （软件构成分析方案） semgrep ci --supply-chain # scan with Semgrep Secrets （检测秘密信息状态的方案） semgrep ci --secrets 注：没有semgrep账号（无法在在线平台查看结果），想要快速扫描本地代码库或者快速测试自定义规则，可以使用指令：\n1 semgrep scan 查看扫描结果\r本地查看\r在使用semgrep ci指令时，CLI内可直接浏览扫描结果。 要将结果导出为纯文本文件：\n1 semgrep ci --text --text-output=semgrep.txt 要将结果导出到 SARIF 文件：\n1 semgrep ci --sarif --sarif-output=semgrep.sarif 要将结果导出到 JSON 文件：\n1 semgrep ci --json --json-output=semgrep.json 在线查看\r在 Semgrep AppSec 平台可以浏览该账号所有项目使用所有产品的扫描结果并进行过滤等操作： 左侧的导航栏中\u0026quot;Code\u0026quot; \u0026ldquo;Supply Chain\u0026rdquo; \u0026ldquo;Secrets\u0026quot;分类展示了Semgrep的三个产品所检测出的结果。 \u0026ldquo;Rules\u0026quot;部分可以查看规则库、在线编写规则和管理规则使用策略。 “Settings”区可以修改所需功能，如开启“跨文件扫描”等功能。\n创建并运行本地规则\r用户创建了符合规范的规则文件如myrule.yaml后，可以通过指令进行规则的本地测试：\n1 semgrep scan --config PATH/TO/MYRULE.YAML 下图为对样例规则的测试： fin.\n","date":"2024-07-26T00:00:00Z","permalink":"https://chasenkelp.github.io/p/sast%E5%B7%A5%E5%85%B7semgrep%E5%88%9D%E6%9C%9F%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A/","title":"SAST工具：Semgrep初期调研报告"},{"content":"A1阶段 2024-01-20 至 2024-07-31\rA1.1 2024-01-20 至 2024-04-17\rA1.2 2024-04-18 至 2024-07-31\r学习的内容主要包括：\n全部音素以及发音 语法： 现在时 复合过去时 未完成过去时 简单将来时 最近将来时 句式： 直陈式 疑问句 否定句 命令式 简单复合句 ","date":"2024-07-26T00:00:00Z","permalink":"https://chasenkelp.github.io/p/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84%E6%B3%95%E8%AF%AD%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","title":"从0开始的法语学习记录"},{"content":"最早了解到博客的概念是在初中的信息课上，老师说如果大家未来要搞技术的话，还是有一个自己的博客比较好，能养成写博客的习惯就更好！我一直都没太理解博客的意思，以为是在CSDN，豆瓣等以长文章为主要传播媒介的平台上写点东西就算是了。其实略有偏颇。在一两年前，我才了解到建立私人博客页这样一种方式。\n我一直对博客写作有一种怯意，可能是觉得需要有很大的知识储备和技术才能才可以写出有价值的内容，而我目前只是个刚刚踏入软件专业的本科生，我真的可以做到吗？但是在联邦宇宙参观了很多友友的博客后，看到大家非常有意思的日记，非常触动人的情绪记录，还有学习过程、经验分享、影音鉴赏等等，我突然觉得，也许我也可以试试！就这样，看着教程，挑选了个喜欢的主题，这个简陋的小站就完成了！\n我还没有完全想好具体要写什么内容，要给什么人看。我一直认为文字的价值不止是传播，但是经适当的传播后一定会创造更大的价值，但我的文字又往往更爱释放在私人情感分享上，所以我大概会尽量做到“有一定的可读性”同时“充分表达我的想法”吧！就我目前想到的，我可能会写一些学习记录（语言学习、技术学习）、杂谈、读书笔记和影视欣赏，目前只能想到这些啦！\n我认为，保持写作的能力非常重要，而博客这一形式与我的想法不谋而合，那么希望我这个能力可以通过写博客的方式永远保持下去！\n","date":"2024-04-16T00:00:00Z","permalink":"https://chasenkelp.github.io/p/%E4%B8%80%E7%AF%87%E7%AE%80%E7%9F%AD%E7%9A%84%E6%9D%82%E8%B0%88%E5%90%AF%E5%8A%A8%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/","title":"一篇简短的杂谈，启动我的博客"}]